{"version":3,"sources":["App.jsx","serviceWorker.js","index.js"],"names":["initMark","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","outputHandler","markdownInput","setState","markdown","clearBox","resetBox","state","bind","assertThisInitialized","_this2","react_default","a","createElement","Fragment","className","id","rows","placeholder","value","onChange","event","target","onClick","dangerouslySetInnerHTML","__html","Marked","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0SAMIA,EACF,gkBA0DaC,cAvDb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAWRQ,cAAgB,SAASC,GACvBL,KAAKM,SAAS,CAAEC,SAAUF,KAbTR,EAgBnBW,SAAW,WACTR,KAAKM,SAAS,CAAEC,SAAU,OAjBTV,EAoBnBY,SAAW,WACTT,KAAKM,SAAS,CAAEC,SAAUb,KAlB1BG,EAAKa,MAAQ,CACXH,SAAUb,GAGZG,EAAKO,cAAgBP,EAAKO,cAAcO,KAAnBb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KACrBA,EAAKW,SAAWX,EAAKW,SAASG,KAAdb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KAChBA,EAAKY,SAAWZ,EAAKY,SAASE,KAAdb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KATCA,wEAwBV,IAAAgB,EAAAb,KACP,OACEc,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,uCAAuCC,GAAG,aACvDL,EAAAC,EAAAC,cAAA,QAAME,UAAU,wBAAhB,uBAEFJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,uBAAuBC,GAAG,cACvCL,EAAAC,EAAAC,cAAA,YACEE,UAAU,eACVE,KAAK,IACLC,YAAY,uBACZF,GAAG,SACHG,MAAOtB,KAAKU,MAAMH,SAClBgB,SAAU,SAAAC,GAAK,OAAIX,EAAKT,cAAcoB,EAAMC,OAAOH,UAErDR,EAAAC,EAAAC,cAAA,UAAQE,UAAU,kBAAkBQ,QAAS1B,KAAKQ,UAAlD,SAGAM,EAAAC,EAAAC,cAAA,UAAQE,UAAU,oBAAoBQ,QAAS1B,KAAKS,UAApD,SAGAK,EAAAC,EAAAC,cAAA,OACEW,wBAAyB,CAAEC,OAAQC,IAAO7B,KAAKU,MAAMH,WACrDY,GAAG,qBAhDGW,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3ecdb3bc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport ReactFCCTest from \"react-fcctest\";\nimport \"./App.css\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport Marked from \"marked\";\n\nvar initMark =\n  \"# This is an H1 \\r\\n## This is an H2 \\r\\n[Link] \\r\\n Below is a block of text \\r\\n -------------------\\r\\n> This is a \\r\\n> block of text \\r\\n - *Bullet Item 1* \\r\\n - **Bullet Item 2** \\r\\n \\r\\n Here is an Image: ![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png 'Logo Title Text 1') \\r\\n \\r\\n Here is `inline code` \\r\\n \\r\\n And here is a block of code: \\r\\n```\\r\\nvar formula = 2 + 2 \\r\\nconsole.log(formula)\\r\\n```\\r\\n **Please feel free to change the code and play with Markdown!** \\r\\n \\r\\n [Link]: https://www.duckduckgo.com\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      markdown: initMark\n    };\n\n    this.outputHandler = this.outputHandler.bind(this);\n    this.clearBox = this.clearBox.bind(this);\n    this.resetBox = this.resetBox.bind(this);\n  }\n\n  outputHandler = function(markdownInput) {\n    this.setState({ markdown: markdownInput });\n  };\n\n  clearBox = function() {\n    this.setState({ markdown: \" \" });\n  };\n\n  resetBox = function() {\n    this.setState({ markdown: initMark });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <nav className=\"navbar fixed-top navbar-dark bg-dark\" id=\"title-box\">\n          <span className=\"navbar-brand mb-0 h1\">Markdown Previewer</span>\n        </nav>\n        <div className=\"container form-group\" id=\"editor-box\">\n          <textarea\n            className=\"form-control\"\n            rows=\"6\"\n            placeholder=\"Enter markdown here.\"\n            id=\"editor\"\n            value={this.state.markdown}\n            onChange={event => this.outputHandler(event.target.value)}\n          />\n          <button className=\"btn btn-primary\" onClick={this.clearBox}>\n            Clear\n          </button>\n          <button className=\"btn btn-secondary\" onClick={this.resetBox}>\n            Reset\n          </button>\n          <div\n            dangerouslySetInnerHTML={{ __html: Marked(this.state.markdown) }}\n            id=\"preview\"\n          />\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}